This document captures some discussion on getting the correct input
files for daily files when the inputs aren't strictly on daily
boundaries. On RBSP-ECT this was used in converting level 0.5 (on
"mission day" boundaries) to level 1 (UTC day). Part of that
discussion was figuring out which date-based calls should be oriented
to the UTC day the file is stamped with vs. the actual first/last
record of data in it.

I'm going on the assumption that a FILE is a PRODUCT plus a VERSION
plus a UTC_FILE_DATE, i.e. the combination of those three uniquely
determines a file. So that's mostly the razor I've used to split: is
this treating a date as "which file" or "which times are present in
the file." We have a constraint on the file table that utc_file_date +
product_id + interface_version + quality_comment + revision_version is
unique. I think that's wrong: I think it should be quality_version not
quality_comment.

There's a huge amount of detail on every single call below, but in
almost all cases calls to getFilesByDate, getFilesByProductDate, or
getFiles with dates specified are treating it as a way of identifying
a file. So I think the default "by date" should remain utc_file_date
and the doctrings updated.

Then I'll add a new argument to getFiles, startTime and endTime, that
will then base off utc_start_time and utc_stop_time of the
files. That'll then have a helper function getFilesByProductTime which
will be used when calculating input files in DBRunner,
dbprocessing._getRequiredProducts, and runMe._parentsChanged. This
will ONLY be used if the output timebase is DAILY; FILE and RUN
timebase will continue to go by utc_file_date (since we want a 1:1
file mapping there.)

Usage of various affected functions

getFilesByDate
==============
test_DButils has two tests for it

getFilesByProductDate
=====================
test_DButils has one test

missingFilesByProduct, which searches for dates of a particularproduct
which aren't in the db ("missing" just means hole in the date
sequence, not that there are inputs with no output.) This probably
should indeed be by utc_file_date.

coveragePlot, which is similar and should also be utc_file_date.

DBRunner: This should probably match whatever happens in the actual
ProcessQueue. Maybe some of this should be turned into calls to
helper functions that are also used by ProcessQueue.

printInfo: Probably should stay utc_file_date, since it's just info
about what dates are present.

newestVersionProblemFinder: uses an embedded version of
getFilesByProductDate that handles newest version differently (this
one uses utc_file_date). It calls getAllfilenames which then calls
getFiles with date arguments, which currently goes by
utc_file_date. Since this is testing stuff related to newest version,
it should probably be done by utc_file_date. (and getAllFilenames
should probably do so, too, as it's looking for characteristic date.)

DButils.fileIsNewest: probably want utc_file_date, since we're hanging
our hat off file being a combination of product + date + version.

DButils.file_id_Clean: explicitly based on utc_file_date, returns only
newest version of file IDs passed in.

dbprocessing._getRequiredProducts: This is the one that really
determines what is processed. It should probably be utc_file_date for
FILE (and maybe RUN?) timebase but utc_start_time and utc_stop_time
for DAILY.

runMe._parentsChanged: This is not the same function as
getRequiredProducts although it's called in similar context. It's
doing a lookup by product ID and date (searching for latest version),
so it's looking for a particular set of files, already has all the
dates in the existing inputs, should be utc_file_date

getFiles
========
This is what getFilesByProductDate ultimately calls, so this only
includes calls that set the date arguments.

Note there are no unit tests on getFiles itself (just the helper
functions that call it).

newestVersionProblemFinder: should probably be by utc_file_date, since
it's looking at whether "newest version" is actually the newest
version.

dbprocessing._reprocessBy: probably want utc_file_date

DButils.getAllFilenames: probably utc_file_date, same rationale as
fileIsNewest.

DButils.getAllFileIds: utc_file_date, same rationale
